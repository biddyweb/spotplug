import com.plugtree.spotplug.impl.GenericEvent;
import com.plugtree.spotplug.impl.User;
import com.plugtree.spotplug.Actuator;

import java.lang.Number;
import java.util.concurrent.ConcurrentHashMap;
import org.drools.runtime.rule.RuleContext;

global ConcurrentHashMap hashMap;
global Actuator actuator;

declare GenericEvent
    @role(event)
    @timestamp(callDateTime)
    @duration(callDuration)    
end
/*
# 1st Fraud Pattern
rule "Strange volume in transaction"
dialect "mvel" 

when
	$user : User()
	Number($totalAmount : intValue) from accumulate($event : GenericEvent(userId == $user.id) over window:time(1d) from entry-point GenericEventEntryPoint, sum($event.amount))
	
then
	System.out.println("Activada!" + $totalAmount);
end
*/

# 2nd Fraud Pattern
rule "Transaction at unusual hours"
dialect "mvel"

when
	GenericEvent($userId : userId,
				 callDateTime.hours >= 2,
				 callDateTime.hours <= 6,
				 amount > 4000) from entry-point GenericEventEntryPoint
then
	hashMap.get($userId).increaseFraudProbability(30);
	actuator.writeOutput(kcontext, hashMap.get($userId));
end

# 3th Fraud Pattern
rule "Same transaction, same time, everyday"
dialect "mvel" 

when
	$event : GenericEvent() from entry-point GenericEventEntryPoint
	
	GenericEvent(callDateTime.day > $event.callDateTime.day,
				 callDateTime.hours == $event.callDateTime.hours,
				 callDateTime.minutes == $event.callDateTime.minutes,
				 callDateTime.seconds == $event.callDateTime.seconds,
				 userId == $event.userId,
				 amount == $event.amount) from entry-point GenericEventEntryPoint 
then
	hashMap.get($event.userId).increaseFraudProbability(60);
	actuator.writeOutput(kcontext, hashMap.get($event.userId));
end

# 4th Fraud Pattern
rule "Incorrect Message Order"
dialect "mvel"

when
	$user : User()
	$e : GenericEvent($userId : userId ,userId == $user.id, $tid : transactionID , $sid : sequentialID, $ecdt : callDateTime) from entry-point GenericEventEntryPoint
	GenericEvent(userId == $userId,
				 this != $e,transactionID == $tid,
				 sequentialID < $sid,
				 callDateTime.year  == $ecdt.year,			     
				 callDateTime.month  == $ecdt.month,
			     callDateTime.day  == $ecdt.day,
			     callDateTime.hours  == $ecdt.hours,
			     callDateTime.minutes  == $ecdt.minutes,
			     callDateTime.seconds > $ecdt.seconds
			     ) from entry-point GenericEventEntryPoint
then
	#Rechazar transaccion.
	actuator.writeOutput(kcontext, hashMap.get($userId));
end

# 5th Fraud Pattern
rule "Identical transactions"
dialect "mvel" 
when
	$firstEvent : GenericEvent() over window:time(10s) from entry-point GenericEventEntryPoint
	
	GenericEvent(callDateTime.seconds > $firstEvent.callDateTime.seconds,
				 userId == $firstEvent.userId,
				 amount == $firstEvent.amount) from entry-point GenericEventEntryPoint
then
	#Rechazar transaccion.
	actuator.writeOutput(kcontext, hashMap.get($firstEvent.userId));
end

# 6th Fraud Pattern
rule "Exact coincidence of 2 events at Start Time Stamp , same User"
dialect "mvel" 
when
	$user : User()
	exists ( $e : GenericEvent(userId == $user.id , $ecdt : callDateTime) from entry-point GenericEventEntryPoint and
	  		GenericEvent(userId == $user.id, this != $e, 
				    callDateTime.day == $ecdt.day,
				    callDateTime.month == $ecdt.month,
				    callDateTime.year == $ecdt.year,
				    callDateTime.hours == $ecdt.hours,
				    callDateTime.minutes == $ecdt.minutes,
				    callDateTime.seconds == $ecdt.seconds) from entry-point GenericEventEntryPoint)
then
	actuator.writeOutput(kcontext, hashMap.get($user.id));
	$user.increaseFraudProbability(10);	
end

# 7th Fraud Pattern
rule "Too many events in a short period of time"
dialect "mvel" 

when
	$user : User()
	Number($count : intValue, intValue > 3) from accumulate($event : GenericEvent(userId == $user.id) over window:time(1m) from entry-point GenericEventEntryPoint, count($event)) 
then
	$user.increaseFraudProbability(20);
	actuator.writeOutput(kcontext, $user);	 
end

/*
#Support Rule for 8th Fraud Pattern
rule "At Least 3 Events From an User"
dialect "mvel"
salience -200000
no-loop
when
	 $user : User()  
	 Number(intValue == 3) from accumulate( $e : GenericEvent( userId == $user.id) from entry-point GenericEventEntryPoint,count($e))
	 $users : UsersList()	 
then
	System.out.println("Fraud Pattern (Rule 8) can be fired " + $user.id );
	modify($users){
		add($user);			
	}
	System.out.println("Number of Users:" + $users.size());
end

# 8th Fraud Pattern
rule "Wide Distance Between Events"
dialect "mvel"
salience -200001
when
	 exists UsersList()
	 $users : UsersList()
	 $user : User() from $users 
	 Number(intValue < 3) from accumulate( $e : GenericEvent( userId == $user.id) over window:time( 2h ) from entry-point GenericEventEntryPoint,count($e))
then
	actuator.writeOutput(kcontext, $user);
	$user.increaseFraudProbability(10);
	System.out.println(" Users :" + $users.size);
end
*/

# 9th Fraud Pattern
rule "Excesive amount"
dialect "mvel" 
when
	GenericEvent($userId : userId, amount > 10000) from entry-point GenericEventEntryPoint
then
	hashMap.get($userId).increaseFraudProbability(30);
	actuator.writeOutput(kcontext, hashMap.get($userId));
end
