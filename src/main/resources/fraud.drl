import com.plugtree.spotplug.impl.GenericEvent;
import com.plugtree.spotplug.impl.User;

import java.lang.Number;
import java.lang.String;
import java.util.concurrent.ConcurrentHashMap;

global ConcurrentHashMap hashMap;

declare GenericEvent
    @role(event)
    @timestamp(callDateTime)
    @duration(callDuration)    
end

# 1st Fraud Pattern
rule "Strange volume in transaction"
dialect "mvel" 

when
then
end

# 2nd Fraud Pattern
rule "Transaction at unusual hours"
dialect "mvel"
when
	$e : GenericEvent($userId : userId  , callDateTime.hours >= 10, callDateTime.hours <=19, amount > 4000) from entry-point GenericEventEntryPoint
	
then
	hashMap.get($userId).increaseFraudProbability(30);
	System.out.println("Unusual hours" + "Nombre: " + $e.getUserId() + " - ProbabilidadFraude: " + hashMap.get($userId).getFraudProbability()  + "%");
end

# 3th Fraud Pattern
rule "Same transaction, same time, everyday"
dialect "mvel" 

when
	GenericEvent($time : callDateTime) from entry-point GenericEventEntryPoint
	GenericEvent(callDateTime.hours == $time.hours, callDateTime.minutes == $time.minutes, callDateTime.days != $time.days) 
then
	System.out.println("Same transaction different day");
end

# 4th Fraud Pattern
rule "Incorrect Message Order"

when
	$e : GenericEvent($userId : userId , $sid : sequentialID, $ecdt : callDateTime) from entry-point GenericEventEntryPoint
	GenericEvent(userId == $userId, this != $e, sequentialID <= $sid, callDateTime >= $ecdt) from entry-point GenericEventEntryPoint
then
	System.out.println("FRAUD!- Incorrect Message Order, User = " + $userId);
end

# 5th Fraud Pattern
rule "Identical transactions"
dialect "mvel" 

when
	$user : User()
	
	Number(intValue > 1) from accumulate($event : GenericEvent(this.userId == $user.id) over window:time(1m) from entry-point GenericEventEntryPoint, count($event)) 
then
	System.out.println("Identical Transactions!");
end

# 6th Fraud Pattern
rule "Exact coincidence of 2 events at Start Time Stamp , same User"

when
	$e : GenericEvent($userId : userId, $ecdt : callDateTime) from entry-point GenericEventEntryPoint
	GenericEvent(userId == $userId, this != $e, callDateTime == $ecdt) from entry-point GenericEventEntryPoint
then
	System.out.println("FRAUD!- 2 Events at the same time, User = " + $userId);
end

# 7th Fraud Pattern
rule "Too many events in a short period of time"
dialect "mvel" 

when
	$user : User()

	Number($count : intValue, intValue > 3) from accumulate($event : GenericEvent(this.userId == $user.id) over window:time(1m) from entry-point GenericEventEntryPoint, count($event)) 
then
	$user.increaseFraudProbability(20);
	System.out.println("Too Many events Short Period - " + $user.id + " - " + $user.getFraudProbability());
end

# 8th Fraud Pattern
rule "Wide Distance Between Events"
dialect "mvel"
when
	 $user : User()	 
	 $n : Number(intValue < 3) from accumulate( $e : GenericEvent( userId == $user.id  ) over window:time( 2h ) from entry-point GenericEventEntryPoint ,count($e))
	
then
	System.out.println("FRAUD!- Wide Distance Between Events " + $n.intValue() + " UserId : " + $user.id);		
end

# 9th Fraud Pattern
rule "Excesive amount"
dialect "mvel" 

when
	GenericEvent($userId : userId, amount > 10000) from entry-point GenericEventEntryPoint
then
	hashMap.get($userId).increaseFraudProbability(30);
	System.out.println("Excesive amount - User: " + $userId + " - " + hashMap.get($userId).getFraudProbability());
end